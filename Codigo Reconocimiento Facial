import cv2
import os

# Ruta donde se encuentran las imágenes para el reconocimiento
dataPath = 'C:/Users/pablo/Diplomado IA/Deteccion de Rostros/Data'  # Cambia la ruta según tu directorio
imagePaths = os.listdir(dataPath)  # Lista todas las imágenes en el directorio 'Data'
print('imagePaths=', imagePaths)

# Crear el reconocedor de rostros utilizando LBPH (Local Binary Patterns Histograms)
face_recognizer = cv2.face.LBPHFaceRecognizer_create()

# Cargar el modelo preentrenado LBPH
face_recognizer.read('modeloLBPHFace.xml')  # Asegúrate de tener el modelo entrenado en este archivo

# Iniciar la captura de video
cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)  # Abre la cámara para capturar video
if not cap.isOpened():
    print("No se pudo acceder a la cámara")
    exit()

# Usar un clasificador en cascada de Haar para detectar rostros en la imagen
faceClassif = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

while True:
    # Leer un fotograma de la cámara
    ret, frame = cap.read()  # Captura una imagen del video
    if not ret:  # Si no se obtiene un fotograma, salir del bucle
        break
    
    # Convertir el fotograma a escala de grises para mejorar la precisión de la detección
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    auxFrame = gray.copy()  # Copia de la imagen en escala de grises para manipularla sin afectar la original
    
    # Detectar los rostros en la imagen
    faces = faceClassif.detectMultiScale(gray, 1.3, 5)  # Detectar rostros en la imagen
    
    # Recorrer todos los rostros detectados
    for (x, y, w, h) in faces:
        rostro = auxFrame[y:y + h, x:x + w]  # Extraer la región del rostro
        rostro = cv2.resize(rostro, (150, 150), interpolation=cv2.INTER_CUBIC)  # Redimensionar el rostro a 150x150 píxeles

        # Hacer la predicción con el modelo LBPH
        result = face_recognizer.predict(rostro)
        
        # Mostrar la predicción en el fotograma
        # result[0] es el índice del label (persona) y result[1] es la confianza de la predicción
        cv2.putText(frame, '{}'.format(result), (x, y - 5), 1, 1.3, (255, 255, 0), 1, cv2.LINE_AA)
        
        # Si la predicción tiene una alta confianza (baja incertidumbre), dibujar un rectángulo verde alrededor del rostro
        if result[1] < 70:  # Si la confianza es mayor a 70 (es decir, la predicción es confiable)
            cv2.putText(frame, '{}'.format(imagePaths[result[0]]), (x, y - 25), 2, 1.1, (0, 255, 0), 1, cv2.LINE_AA)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)  # Rectángulo verde
        else:
            cv2.putText(frame, 'Desconocido', (x, y - 20), 2, 0.8, (0, 0, 255), 1, cv2.LINE_AA)  # Si es desconocido
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 0, 255), 2)  # Rectángulo rojo

    # Mostrar el fotograma con los rostros detectados y etiquetados
    cv2.imshow('frame', frame)
    
    # Esperar una tecla; salir si se presiona 'Esc' (código 27)
    k = cv2.waitKey(1)
    if k == 27:
        break

# Liberar la cámara y cerrar las ventanas al finalizar
cap.release()
cv2.destroyAllWindows()
