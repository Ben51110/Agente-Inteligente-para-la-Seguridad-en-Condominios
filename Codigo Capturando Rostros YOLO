{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import os\n",
    "import imutils\n",
    "from ultralytics import YOLO\n",
    "\n",
    "# Nombre de la persona y la ruta donde se guardarán las imágenes\n",
    "personName = 'Nelson2'\n",
    "dataPath = 'Data'  # Cambia a la ruta donde hayas almacenado 'Data'\n",
    "personPath = os.path.join(dataPath, personName)\n",
    "\n",
    "# Crear la carpeta de la persona si no existe\n",
    "if not os.path.exists(personPath):\n",
    "    print('Carpeta creada: ', personPath)\n",
    "    os.makedirs(personPath)\n",
    "\n",
    "# Cargar modelo YOLO preentrenado para detección de rostros\n",
    "model = YOLO('yolov8n.pt')  # Puedes cambiar a 'yolov8-face.pt' si tienes un modelo específico para rostros\n",
    "\n",
    "cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)\n",
    "count = 0\n",
    "\n",
    "while True:\n",
    "    ret, frame = cap.read()\n",
    "    if not ret: \n",
    "        break\n",
    "\n",
    "    frame = imutils.resize(frame, width=640)\n",
    "\n",
    "    # Detectar rostros con YOLO\n",
    "    results = model(frame)  # Detecta objetos en la imagen (rostros, personas, etc.)\n",
    "    \n",
    "    # Filtrar solo las detecciones de rostros (si tu modelo YOLO está entrenado para ello)\n",
    "    faces = results[0].boxes.xyxy.cpu().numpy()\n",
    "\n",
    "    for face in faces:\n",
    "        x1, y1, x2, y2 = map(int, face)  # Coordenadas del rostro detectado\n",
    "\n",
    "        # Dibujar un rectángulo alrededor del rostro detectado\n",
    "        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)\n",
    "\n",
    "        # Recortar el rostro de la imagen\n",
    "        rostro = frame[y1:y2, x1:x2]\n",
    "        rostro = cv2.resize(rostro, (150, 150), interpolation=cv2.INTER_CUBIC)\n",
    "\n",
    "        # Guardar la imagen recortada\n",
    "        cv2.imwrite(os.path.join(personPath, f'rostro_{count}.jpg'), rostro)\n",
    "        count += 1\n",
    "\n",
    "    # Mostrar la imagen con los rostros detectados\n",
    "    cv2.imshow('frame', frame)\n",
    "\n",
    "    # Salir si presionas 'Esc' o si se llega al límite de imágenes (300)\n",
    "    k = cv2.waitKey(1)\n",
    "    if k == 27 or count >= 300:\n",
    "        break\n",
    "\n",
    "cap.release()\n",
    "cv2.destroyAllWindows()"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
