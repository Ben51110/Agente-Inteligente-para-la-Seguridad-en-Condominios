import cv2
import os
import imutils

# Nombre de la persona y la ruta donde se guardarán las imágenes
personName = 'Nelson'
dataPath = 'Data'  # Cambia a la ruta donde hayas almacenado Data
personPath = dataPath + '/' + personName

# Crear la carpeta de la persona si no existe
if not os.path.exists(personPath):
    print('Carpeta creada: ', personPath)
    os.makedirs(personPath)

# Abrir la cámara (0) o un video (comentar la línea de la cámara y descomentar la del video)
cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
# cap = cv2.VideoCapture('Video.mp4')  # Si tienes un video en lugar de usar la cámara

# Cargar el clasificador en cascada para la detección de rostros
faceClassif = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Contador para el número de imágenes
count = 0

while True:
    # Leer un fotograma de la cámara o video
    ret, frame = cap.read()
    if ret == False:  # Si no se pudo leer el fotograma, salir del bucle
        break

    # Redimensionar el fotograma
    frame = imutils.resize(frame, width=640)

    # Convertir a escala de grises para mejorar la detección de rostros
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    auxFrame = frame.copy()  # Copia auxiliar del fotograma para recortar los rostros

    # Detectar rostros en la imagen
    faces = faceClassif.detectMultiScale(gray, 1.3, 5)

    # Dibujar un rectángulo alrededor de cada rostro detectado
    for (x, y, w, h) in faces:
        # Dibujar el rectángulo en la imagen
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

        # Recortar el rostro de la imagen
        rostro = auxFrame[y:y + h, x:x + w]
        rostro = cv2.resize(rostro, (150, 150), interpolation=cv2.INTER_CUBIC)

        # Guardar la imagen recortada en la carpeta correspondiente
        cv2.imwrite(personPath + '/rostro_{}.jpg'.format(count), rostro)

        # Incrementar el contador de imágenes guardadas
        count = count + 1

    # Mostrar el fotograma con los rostros detectados
    cv2.imshow('frame', frame)

    # Esperar una tecla para salir: 27 es la tecla ESC
    k = cv2.waitKey(1)
    if k == 27 or count >= 300:  # Salir si se presiona ESC o se llega a 300 imágenes
        break

# Liberar la cámara y cerrar todas las ventanas de OpenCV
cap.release()
cv2.destroyAllWindows()
