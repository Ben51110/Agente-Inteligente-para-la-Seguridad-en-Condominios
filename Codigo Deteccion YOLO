import cv2
import numpy as np
import winsound  # Importación de la librería para generar sonidos
from ultralytics import YOLO  # Importamos YOLOv8 para la detección de objetos
from datetime import datetime  # Para manejar fechas y horas
import os  # Para interactuar con el sistema de archivos
from openpyxl import Workbook, load_workbook  # Para trabajar con archivos Excel

# Cargar el modelo YOLOv8 entrenado
model = YOLO(r'C:\\Users\\pablo\\Downloads\\proyecto (1)\\proyecto\\roboflow\\runs\\detect\\train6\\weights\\best.pt')

# Inicializar la cámara
cap0 = cv2.VideoCapture(0)

# Ruta al archivo Excel donde se guardarán las detecciones
excel_path = r'C:\\Users\\pablo\\Downloads\\proyecto (1)\\Excel\\registro_detecciones.xlsx'

# Diccionario para controlar el tiempo de la última detección por persona
ultima_deteccion = {}

# Función para registrar detección en el archivo Excel
def registrar_deteccion(persona):
    ahora = datetime.now()  # Obtener la fecha y hora actual
    hora_formateada = ahora.strftime("%d-%m-%Y %H:%M:%S")  # Formatear la hora

    # Validar si han pasado al menos 10 segundos desde la última detección de esa persona
    if persona in ultima_deteccion:
        tiempo_transcurrido = (ahora - ultima_deteccion[persona]).total_seconds()
        if tiempo_transcurrido < 10:
            # Si han pasado menos de 10 segundos, ignoramos la detección
            # print(f"[INFO] Ignorada detección de {persona}, solo han pasado {tiempo_transcurrido:.1f} segundos.")
            return

    # Actualizar la última detección de esta persona
    ultima_deteccion[persona] = ahora

    nueva_fila = [persona, hora_formateada]  # Datos a agregar al Excel

    # Crear el archivo Excel si no existe
    if not os.path.exists(excel_path):
        wb = Workbook()  # Crear un libro nuevo
        ws = wb.active
        ws.append(["Persona", "Hora"])  # Añadir cabecera
        wb.save(excel_path)  # Guardar el archivo

    try:
        # Cargar el archivo Excel y agregar la nueva fila
        wb = load_workbook(excel_path)
        ws = wb.active
        ws.append(nueva_fila)
        wb.save(excel_path)
        wb.close()
        print(f"[EXCEL] Registrado: {nueva_fila}")
    except Exception as e:
        print(f"[ERROR Excel] {e}")

# Función para procesar cada frame con detección YOLO
def process_frame(frame):
    frame = cv2.resize(frame, (640, 640))  # Redimensionamos el frame para que sea adecuado para YOLO
    results = model(frame)[0]  # Realizamos la detección con YOLO

    # Recorremos todos los resultados obtenidos
    for result in results.boxes:
        cls = int(result.cls[0])  # Obtener la clase del objeto detectado
        conf = float(result.conf[0])  # Obtener la confianza de la detección
        x1, y1, x2, y2 = map(int, result.xyxy[0])  # Coordenadas de la caja delimitadora
        class_name = model.names[cls]  # Nombre de la clase detectada

        # Dibujar la caja delimitadora y la etiqueta con la confianza
        cv2.putText(frame, f'{class_name} {conf:.2f}', (x1, y1 - 10), 1, 1.3, (0, 255, 0), 2)
        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

        # Registrar la detección si la confianza es mayor que el umbral
        if conf > 0.2:
            print(f"[DETECCIÓN] {class_name} detectado con {conf:.2f}")
            winsound.Beep(1000, 500)  # Emitir un sonido al detectar
            cv2.imshow("Alerta: Persona Detectada", frame)  # Mostrar la imagen con la detección
            registrar_deteccion(class_name)  # Registrar la detección en el archivo Excel

    return frame  # Devolver el frame con las anotaciones

# Bucle principal para capturar video y procesar cada frame
while True:
    ret0, frame0 = cap0.read()  # Leer un frame de la cámara

    if not ret0:
        print("Error leyendo la cámara")  # Si no se puede leer, mostramos un mensaje de error
        break

    frame0 = process_frame(frame0)  # Procesamos el frame
    frame0 = cv2.resize(frame0, (640, 360))  # Redimensionamos el frame para mostrarlo

    # Mostrar el frame con la detección en una ventana
    cv2.imshow("Reconocimiento Facial - SOLO YOLOv8", frame0)

    # Salir si se presiona la tecla ESC
    if cv2.waitKey(1) == 27:
        break

# Liberamos la cámara y cerramos todas las ventanas al finalizar
cap0.release()
cv2.destroyAllWindows()
